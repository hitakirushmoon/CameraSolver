package kata;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GraphTest {
	public static void main(String[] args) {
		int mod = 7, base = 2;
		Graph g = new Graph(mod, base);
	}
}

class Graph {
	Node[] nodes;
	Node root = new Node(-1);
	Node end;

	Graph(int mod, int base) {
		nodes = new Node[mod];
		for (int i = 0; i < nodes.length; i++) {
			nodes[i] = new Node(i);
		}
		for (Node n : nodes) {
			for (int b = 0; b < base; b++) {
				int child = (n.value * base + b) % mod;
				if (child == n.value) {
					n.self = Integer.toString(b);
				} else {
					nodes[child].parents.add(n);
					n.children.put(nodes[child], Integer.toString(b));
				}
			}
		}
		end = new Node(mod);
		nodes[0].parents.add(root);
		root.children.put(nodes[0], "");
		nodes[0].children.put(end, "");
		end.parents.add(nodes[0]);
		for (int i = mod - 1; i > -1; i--) {
			nodes[i].removeSelf();
		}
	}

	String getRegex() {
		String regex = root.children.get(end);
		return regex.substring(1, regex.length() - 2) + "+";
	}

	public String toString() {
		StringBuilder a = new StringBuilder();
		a.append(root.children).append("\n");
		for (Node node : nodes) {
			a.append(node.value + "=" + node.self).append("\n").append(node.children).append("\n");
		}
		return a.toString();
	}
}

class Node {
	int value;
	Map<Node, String> children = new HashMap<Node, String>();
	List<Node> parents = new ArrayList<Node>();
	String self = "";

	public Node(int value) {
		super();
		this.value = value;
	}

	void removeSelf() {
		for (Node parent : parents) {
			for (Node child : children.keySet()) {
				child.parents.remove(this);
				String parentsToThis = parent.children.get(this);
				String thisToChild = children.get(child);
				String regex;
				if (self.isEmpty()) {
					regex = paren(concat(parentsToThis, thisToChild));
				} else {
					regex = paren(concat(concat(parentsToThis, self + "*"), thisToChild));
				}
				if (parent == child) {
					if (!parent.self.isEmpty()) {
						parent.self = paren(parent.self + "|" + regex);
					} else {
						parent.self = regex;
					}
					continue;
				}
				if (parent.children.containsKey(child)) {
					regex = paren(parent.children.get(child) + "|" + regex);
				} else {
					child.parents.add(parent);
				}
				parent.children.put(child, regex);
			}
			parent.children.remove(this);

		}
	}

	String paren(String a) {
		if (a.length() > 2 && !(a.startsWith("(") && a.endsWith("("))) {
			return "(" + a + ")";
		}
		return a;
	}

	String concat(String a, String b) {
		if ((a.startsWith("(") && a.endsWith("("))) {
			a = a.substring(1, a.length() - 1);
		}
		if ((b.startsWith("(") && b.endsWith("("))) {
			b = b.substring(1, b.length() - 1);
		}
		return a + b;
	}

	public String toString() {
		return " " + value;
	}
}