package kata;

import java.math.BigInteger;

public class Faberge {
	public static void main(String[] args) {
//		System.out.println(degree(BigInteger.valueOf(2),BigInteger.valueOf(3)));
		System.out.println(height(BigInteger.valueOf(40000), BigInteger.valueOf(80000)));
	}

	static long[] remainder = new long[998244353];

	private static BigInteger p = BigInteger.valueOf(998244353);
	static long pp = 998244353;

	Faberge() {
		for (int i = 0; i < pp; i++) {
			remainder[i] = degree(i, pp - 2);
		}
	}

	public static BigInteger height(BigInteger n, BigInteger m) {
		BigInteger h = BigInteger.ZERO;
		BigInteger a = BigInteger.ONE;
		for (BigInteger e = BigInteger.ONE; e.compareTo(n) <= 0; h = h.add(a), e = e.add(BigInteger.ONE)) {
			a = a.multiply(m.add(BigInteger.ONE.subtract(e))).multiply(remainder[e.intValue()]).mod(p);
		}
		return h.mod(p);
	}

	public static long degree(long a, long k) {
		long res = 1;
		long cur = a;

		while (k > 0) {
			if (k % 2 == 1) {
				res = (res * cur) % pp;
			}
			k /= 2;
			cur = (cur * cur) % pp;
		}
		return res;
	}
}