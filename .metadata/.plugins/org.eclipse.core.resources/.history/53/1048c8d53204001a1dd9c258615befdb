package kata;

import java.math.BigInteger;

public class Faberge {
	private static BigInteger p = BigInteger.valueOf(998244353);
	static int pp = 998244353;
	static int[] remainder = new int[998244353];

	public static BigInteger height(BigInteger n, BigInteger m) {
		BigInteger h = BigInteger.ZERO;
		BigInteger a = BigInteger.ONE;
		for (BigInteger e = BigInteger.ONE; e.compareTo(n) <= 0; h = h.add(a), e = e.add(BigInteger.ONE)) {
			a = a.multiply(m.add(BigInteger.ONE.subtract(e)).mod(p)).multiply(degree(e.mod(p), pp - 2)).mod(p);
		}
		return h.mod(p);
	}

	public static BigInteger degree(BigInteger a, int k) {
		BigInteger res = BigInteger.ONE;
		BigInteger cur = a;

		while (k > 0) {
			if (k % 2 == 1) {
				res = res.multiply(cur).mod(p);
			}
			k /= 2;
			cur = cur.multiply(cur).mod(p);
		}
		return res;
	}

}