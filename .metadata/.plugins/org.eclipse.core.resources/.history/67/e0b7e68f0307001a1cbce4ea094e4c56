package kata;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class CakeCutter {
	String[] slices;
	int count;

	public CakeCutter(String cake) {
		slices = cake.split("\n");
		count = cake.length() - cake.replace("o", "").length();

	}

	List<Integer> cakeSizes = new ArrayList<Integer>();
	int[][] position;
	int sizeOfRects;

	public List<String> cut() {
		// Coding and coding... again!
		int m = slices.length;
		int n = slices[0].length();
		position = new int[count][2];

		if (m * n % count != 0) {
			return null;
		}

		sizeOfRects = m * n / count;
		for (int i = 1; i <= Math.sqrt(sizeOfRects); i++) {
			if (sizeOfRects % i == 0) {
				cakeSizes.add(i);
				if (i * i != sizeOfRects) {
					cakeSizes.add(sizeOfRects / i);
				}
			}
		}
		Collections.sort(cakeSizes);
		int raisin = 0;
		for (int x = 0; x < m && raisin < count; x++) {
			for (int y = 0; y < n && raisin < count; y++) {
				if (slices[x].charAt(y) == 'o') {
					position[raisin][0] = x;
					position[raisin][1] = y;
					raisin++;
				}
			}
		}
		return null;
	}

	public List<String> search(String[] cake, List<String> solution) {
		int[] nextCorner = getNextCorner(cake);
		if (nextCorner == null) {
			return solution;
		}
		hLoop: for (Integer h : cakeSizes) {
			int w = sizeOfRects / h;
			boolean found = false;
			for (int[] pos : position) {
				if (pos[0] > nextCorner[0] && pos[0] < nextCorner[0] + h && pos[1] > nextCorner[1]
						&& pos[1] < nextCorner[1] + w) {
					if (found) {
						continue hLoop;
					}
					found = true;
				}
			}
			String[] cakeClone = cake.clone();
		}
		return null;
	}

	public String cut(String[] cake, int x, int y, int w, int h) {
		List<String> slice = new LinkedList<String>();
		String whiteSpace = "";
		for (int i = 0; i < w; i++) {
			whiteSpace += " ";
		}
		for (int i = x; i < x + h; i++) {
			slice.add(cake[i].substring(y, y + w));
			cake[i] = cake[i].substring(0, y) + whiteSpace + cake[i].substring(y + w);
		}
		return String.join("\n", slice);
	}

	public static int[] getNextCorner(String[] cake) {
		for (int x = 0; x < cake.length; x++) {
			for (int y = 0; y < cake[x].length(); y++) {
				if (cake[x].charAt(y) != ' ') {
					return new int[] { x, y };
				}
			}
		}
		return null;
	}
}
