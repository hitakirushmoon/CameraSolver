package kata;

import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;

public class MazeSolver {
	Cell[][][] fullMaze;
	Cell start;

	public MazeSolver(int[][] maze) {
		fullMaze = new Cell[4][maze.length][maze[0].length];
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[i].length; j++) {

				fullMaze[0][i][j] = new Cell(maze[i][j]);
				for (int k = 1; k < fullMaze.length - 1; k++) {
					fullMaze[k][i][j] = fullMaze[k - 1][i][j].createNextInterveal();
					fullMaze[k - 1][i][j].thisNextInterval = fullMaze[k][i][j];
				}
				fullMaze[fullMaze.length - 1][i][j].thisNextInterval = fullMaze[0][i][j];
				if (maze[i][j] == -1) {
					start = fullMaze[0][i][j];
				}
			}
		}
		for (int i = 1; i < maze.length; i++) {
			for (int j = 1; j < maze[i].length; j++) {
				for (int k = 0; k < fullMaze.length; k++) {
					fullMaze[i - 1][j][k].neighbors[0] = fullMaze[i][j][k];
					fullMaze[i][j][k].neighbors[2] = fullMaze[i - 1][j][k];
					fullMaze[i][j - 1][k].neighbors[1] = fullMaze[i][j][k];
					fullMaze[i][j][k].neighbors[3] = fullMaze[i][j - 1][k];

					fullMaze[i - 1][j][k].neighborsNextInterval[0] = fullMaze[i][j][k].thisNextInterval;
					fullMaze[i][j][k].neighborsNextInterval[2] = fullMaze[i - 1][j][k].thisNextInterval;
					fullMaze[i][j - 1][k].neighborsNextInterval[1] = fullMaze[i][j][k].thisNextInterval;
					fullMaze[i][j][k].neighborsNextInterval[3] = fullMaze[i][j - 1][k].thisNextInterval;
				}
			}
		}
	}

	public List<String> solve() {
		// Your code here too!
		return Arrays.asList("");
	}

//	function reconstruct_path(cameFrom, current)
//    List<String> total_path = LinkedList<String>
//    while current in cameFrom.Keys:
//        current := cameFrom[current]
//        total_path.prepend(current)
//    return total_path

// A* finds a path from start to goal.
// h is the heuristic function. h(n) estimates the cost to reach goal from node n.
	List<String> A_Star(Cell start)
	{// The set of discovered nodes that may need to be (re-)expanded.
    // Initially, only the start node is known.
    Queue<Cell> openSet = new PriorityQueue<Cell>();
    openSet.add(start);
    // For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start to n currently known.
    cameFrom := an empty map

    // For node n, gScore[n] is the cost of the cheapest path from start to n currently known.
    gScore := map with default value of Infinity
    gScore[start] := 0

    // For node n, fScore[n] := gScore[n] + h(n).
    fScore := map with default value of Infinity
    fScore[start] := h(start)

    while openSet is not empty
        current := the node in openSet having the lowest fScore[] value
        if current = goal
            return reconstruct_path(cameFrom, current)

        openSet.Remove(current)
        for each neighbor of current
            // d(current,neighbor) is the weight of the edge from current to neighbor
            // tentative_gScore is the distance from start to the neighbor through current
            tentative_gScore := gScore[current] + d(current, neighbor)
            if tentative_gScore < gScore[neighbor]
                // This path to neighbor is better than any previous one. Record it!
                cameFrom[neighbor] := current
                gScore[neighbor] := tentative_gScore
                fScore[neighbor] := gScore[neighbor] + h(neighbor)
                if neighbor not in openSet
                    openSet.add(neighbor)

    // Open set is empty but goal was never reached
    return failure
    }
}

class Cell {
	boolean[] walls;
	Cell thisNextInterval;
	Cell[] neighbors = new Cell[4];
	Cell[] neighborsNextInterval = new Cell[4];
	boolean isGoal;
	Cell last;
	int cost = Integer.MAX_VALUE;

	public Cell(int index) {
		if (index == -2) {
			isGoal = true;
			return;
		}
		if (index == -1) {
			cost = 0;
			return;
		}
		for (int i = 0; i < 4; i++) {
			walls[i] = (index >> i & 1) == 1;
		}
	}

	public Cell(boolean rightWall, boolean bottomWall, boolean leftWall, boolean topWall) {
		walls[0] = rightWall;
		walls[1] = bottomWall;
		walls[2] = leftWall;
		walls[3] = topWall;
	}

	public Cell createNextInterveal() {
		return new Cell(walls[1], walls[2], walls[3], walls[0]);
	}
}