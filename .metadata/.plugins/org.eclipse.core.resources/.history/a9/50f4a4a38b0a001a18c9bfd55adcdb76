package kata;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.stream.IntStream;

public class BooleanOrder {
	boolean[] operands;
	char[] operators;
	BigInteger[][] t;
	BigInteger[][] f;

	public static void main(String[] args) {
	}

	public BooleanOrder(final String operands, final String operators) {
		this.operands = new boolean[operands.length()];
		IntStream.range(0, this.operands.length).forEach(i -> this.operands[i] = operands.charAt(i) == 't');
		this.operators = operators.toCharArray();
		t = new BigInteger[operands.length()][operands.length()];
		f = new BigInteger[operands.length()][operands.length()];

		for (int i = 0; i < operands.length(); i++) {
			if (this.operands[i]) {
				t[i][i] = BigInteger.ONE;
				f[i][i] = BigInteger.ZERO;
			} else {
				f[i][i] = BigInteger.ONE;
				t[i][i] = BigInteger.ZERO;
			}
		}
		for (BigInteger[] arr : t) {
			System.out.println(Arrays.toString(arr));
		}
	}

	public BigInteger solve() {
//		for(int g = 1; g < operands.length; g++) {
//			for(int i = 0; i + g <= operands.length; i++) {
//				int j = i + g;
//				for(int k = i; k < )
//			}
//		}
		return BigInteger.ZERO;
//		return t(0, operators.length);
	}
}