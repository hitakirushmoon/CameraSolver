package kata;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class MazeSolver {
	Cell[][][] fullMaze;

	public MazeSolver(int[][] maze) {
		fullMaze = new Cell[4][maze.length][maze[0].length];
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[i].length; j++) {
				fullMaze[0][i][j] = new Cell(maze[i][j]);
				for (int k = 1; k < fullMaze.length - 1; k++) {
					fullMaze[k][i][j] = fullMaze[k - 1][i][j].createNextInterveal();
					fullMaze[k - 1][i][j].thisNextInterval = fullMaze[k][i][j];
				}
				fullMaze[fullMaze.length - 1][i][j].thisNextInterval = fullMaze[0][i][j];

			}
		}
		for (int i = 1; i < maze.length; i++) {
			for (int j = 1; j < maze[i].length; j++) {
				for (int k = 0; k < fullMaze.length; k++) {
					fullMaze[i - 1][j][k].neighbors[0] = fullMaze[i][j][k];
					fullMaze[i][j][k].neighbors[2] = fullMaze[i - 1][j][k];
					fullMaze[i - 1][j][k].neighborsNextInterval[0] = fullMaze[i][j][k].thisNextInterval;
					fullMaze[i][j][k].neighborsNextInterval[2] = fullMaze[i - 1][j][k].thisNextInterval;
					
				}
			}
		}
	}

	public List<String> solve() {
		// Your code here too!
		return Arrays.asList("");
	}
}

class Cell {
	boolean[] walls;
	Cell thisNextInterval;
	Cell[] neighbors = new Cell[4];
	Cell[] neighborsNextInterval = new Cell[4];

	public Cell(int index) {
		for (int i = 0; i < 4; i++) {
			walls[i] = (index >> i & 1) == 1;
		}
	}

	public Cell(boolean rightWall, boolean bottomWall, boolean leftWall, boolean topWall) {
		walls[0] = rightWall;
		walls[1] = bottomWall;
		walls[2] = leftWall;
		walls[3] = topWall;
	}

	public Cell createNextInterveal() {
		return new Cell(walls[1], walls[2], walls[3], walls[0]);
	}
}