package kata;

import java.math.BigInteger;
import java.util.stream.IntStream;

public class BooleanOrder {
	boolean[] operands;
	char[] operators;
//	BigInteger[][] memory;

	public BooleanOrder(final String operands, final String operators) {
		this.operands = new boolean[operands.length()];
		IntStream.range(0, this.operands.length).forEach(i -> this.operands[i] = operands.charAt(i) == 't');
		this.operators = operators.toCharArray();
		for (int i = 0; i < operators.length(); i++) {
//			memory[i] = new BigInteger[operators.length() - i];
		}
	}

	public BigInteger solve() {
		return t(0, operators.length);
	}

	public BigInteger t(int i, int j) {
		if (i == j)
			return operands[i] ? BigInteger.ONE : BigInteger.ZERO;
		BigInteger total = BigInteger.ZERO;
		for (int k = i; k <= j; k++) {
			if (operators[k] == '&') {
				total.add(t(i, k).multiply(t(k, j)));
			}
		}
	}
}