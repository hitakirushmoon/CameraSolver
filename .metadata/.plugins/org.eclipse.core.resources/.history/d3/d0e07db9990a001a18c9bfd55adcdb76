package kata;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.IntStream;

public class BooleanOrder {
	boolean[] operands;
	char[] operators;
	BigInteger[][] t;
	BigInteger[][] f;

	public static void main(String[] args) {
		System.out.println(new BooleanOrder("ttftfftf","|&^&&||").solve());
	}

	public BooleanOrder(final String operands, final String operators) {
		this.operands = new boolean[operands.length()];
		IntStream.range(0, this.operands.length).forEach(i -> this.operands[i] = operands.charAt(i) == 't');
		this.operators = operators.toCharArray();
		t = new BigInteger[operands.length()][];
		f = new BigInteger[operands.length()][];

		for (int i = 0; i < operands.length(); i++) {
			t[i] = new BigInteger[operands.length() - i];
			f[i] = new BigInteger[operands.length() - i];
			if (this.operands[i]) {
				t[i][0] = BigInteger.ONE;
				f[i][0] = BigInteger.ZERO;
			} else {
				f[i][0] = BigInteger.ONE;
				t[i][0] = BigInteger.ZERO;
			}
		}
		System.out.println(this);
	}

	public BigInteger solve() {
		for (int g = 1; g < operands.length; g++) {
			for (int i = 0; i + g < operands.length; i++) {
				t[i][g] = BigInteger.ZERO;
				f[i][g] = BigInteger.ZERO;
				for (int k = 0; k < g; k++) {
					BigInteger tik = t[i][k].add(f[i][k]);
					BigInteger tkj = t[i + k + 1][g].add(f[i + k + 1][g]);
					if (operators[k] == '&') {
						t[i][g] = t[i][g].add(t[i][k].multiply(t[k + 1][g]));
						f[i][g] = f[i][g].add((tik.multiply(tkj)).subtract(t[i][k].multiply(t[k + 1][g])));
					}
					else if (operators[k] == '|') {
						f[i][g] = f[i][g].add(f[i][k].multiply(f[k + 1][g]));
						t[i][g] = t[i][g].add((tik.multiply(tkj)).subtract(f[i][k].multiply(f[k + 1][g])));
					} else {
						t[i][g] = t[i][g].add(f[i][k].multiply(t[k + 1][g])).add(t[i][k].multiply(f[k + 1][g]));
						f[i][g] = f[i][g].add(f[i][k].multiply(f[k + 1][g])).add(t[i][k].multiply(t[k + 1][g]));
					}
				}
			}
			System.out.println(this);
		}

		return t[0][operators.length];
	}

	public String toString() {
		List<String> a = new LinkedList<String>();
		a.add("true:");
		for (BigInteger[] s : t) {
			a.add(Arrays.toString(s));
		}
		a.add("false:");
		for (BigInteger[] s : f) {
			a.add(Arrays.toString(s));
		}
		return String.join("\n", a) + "\n";
	}
}